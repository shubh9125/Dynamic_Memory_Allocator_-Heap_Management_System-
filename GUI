import tkinter as tk
from tkinter import messagebox
import time

MAX_MEMORY = 1024
PAGE_SIZE = 64
MIN_BUDDY_SIZE = 32

# Colors for allocation strategies
STRATEGY_COLORS = {
    'first': '#FF6F61',    # red-ish
    'best': '#6B5B95',     # purple-ish
    'next': '#88B04B',     # green-ish
    'buddy': '#FFA500',    # orange
    'free': '#CCCCCC'      # grey for free blocks
}

class Block:
    def __init__(self, size, start, is_free=True, strategy=None):
        self.size = size
        self.start = start
        self.is_free = is_free
        self.strategy = strategy  # store which strategy allocated this block (None if free)
        self.next = None
        self.prev = None

class MemoryAllocator:
    def __init__(self):
        self.head = Block(MAX_MEMORY, 0)
        self.last_allocated = self.head
        self.steps = {'first': 0, 'best': 0, 'next': 0, 'buddy': 0}
        self.time_taken = {'first': 0.0, 'best': 0.0, 'next': 0.0, 'buddy': 0.0}
        self.counts = {'first': 0, 'best': 0, 'next': 0, 'buddy': 0}

    def display_memory(self):
        result = ""
        temp = self.head
        while temp:
            status = 'Yes' if temp.is_free else f"No ({temp.strategy})"
            result += f"Start: {temp.start}, Size: {temp.size}, Free: {status}\n"
            temp = temp.next
        return result

    def allocate(self, size, method='smart'):
        if method != 'smart':
            return self._try_allocate_strategy(size, method)

        strategies = ['buddy', 'best', 'first', 'next']
        results = []

        for m in strategies:
            original_state = self._clone_memory()
            start_time = time.time()
            result = self._try_allocate_strategy(size, m, dry_run=True)
            elapsed = time.time() - start_time

            if "allocated" in result:
                results.append((m, elapsed, result, original_state))

        if not results:
            return "Smart-Fit failed: No suitable block."

        # Select strategy with minimum elapsed time (or could add steps if you want)
        best = sorted(results, key=lambda x: x[1])[0]
        method, _, _, snapshot = best

        self.head = snapshot
        final_result = self._try_allocate_strategy(size, method, dry_run=False)
        return f"Smart-Fit selected {method.capitalize()} strategy.\n{final_result}"

    def _try_allocate_strategy(self, size, method, dry_run=False):
        start_time = time.time()
        steps = 0

        if method == 'first':
            temp = self.head
            while temp:
                steps += 1
                if temp.is_free and temp.size >= size:
                    if not dry_run:
                        self._split_block(temp, size, method)
                        self._update_stats(method, steps, time.time() - start_time)
                    return f"First-Fit allocated {size} bytes in {steps} steps"
                temp = temp.next

        elif method == 'best':
            temp = self.head
            best = None
            while temp:
                steps += 1
                if temp.is_free and temp.size >= size:
                    if not best or temp.size < best.size:
                        best = temp
                temp = temp.next
            if best:
                if not dry_run:
                    self._split_block(best, size, method)
                    self._update_stats(method, steps, time.time() - start_time)
                return f"Best-Fit allocated {size} bytes in {steps} steps"

        elif method == 'next':
            temp = self.last_allocated
            start = temp
            while True:
                steps += 1
                if temp.is_free and temp.size >= size:
                    if not dry_run:
                        self._split_block(temp, size, method)
                        self.last_allocated = temp
                        self._update_stats(method, steps, time.time() - start_time)
                    return f"Next-Fit allocated {size} bytes in {steps} steps"
                temp = temp.next or self.head
                if temp == start:
                    break

        elif method == 'buddy':
            size_pow2 = self._next_power_of_two(max(size, MIN_BUDDY_SIZE))
            block = self._find_buddy_block(size_pow2)
            if not block:
                return "Buddy allocation failed: No suitable block."
            while block.size > size_pow2:
                self._split_buddy_block(block)
            if not dry_run:
                block.is_free = False
                block.strategy = method
                self._update_stats('buddy', steps, time.time() - start_time)
            return f"Buddy allocated {size_pow2} bytes at address {block.start}"

        return "Allocation failed"

    def _split_block(self, block, size, strategy):
        if block.size > size:
            new_block = Block(block.size - size, block.start + size)
            new_block.next = block.next
            new_block.prev = block
            if block.next:
                block.next.prev = new_block
            block.next = new_block
            block.size = size
        block.is_free = False
        block.strategy = strategy

    def _split_buddy_block(self, block):
        half = block.size // 2
        buddy = Block(half, block.start + half)
        buddy.next = block.next
        if buddy.next:
            buddy.next.prev = buddy
        block.size = half
        block.next = buddy
        buddy.prev = block

    def _find_buddy_block(self, size):
        temp = self.head
        while temp:
            if temp.is_free and temp.size >= size and self._is_power_of_two(temp.size):
                return temp
            temp = temp.next
        return None

    def _is_power_of_two(self, n):
        return (n & (n - 1)) == 0

    def _next_power_of_two(self, n):
        return 1 << (n - 1).bit_length()

    def _update_stats(self, method, steps, elapsed):
        self.steps[method] += steps
        self.time_taken[method] += elapsed
        self.counts[method] += 1

    def _clone_memory(self):
        def clone_block(block):
            new_block = Block(block.size, block.start, block.is_free, block.strategy)
            if block.next:
                new_block.next = clone_block(block.next)
                new_block.next.prev = new_block
            return new_block

        return clone_block(self.head)

    def deallocate(self, start_addr):
        temp = self.head
        prev = None
        while temp:
            if temp.start == start_addr:
                temp.is_free = True
                temp.strategy = None
                # Merge with next free block
                if temp.next and temp.next.is_free:
                    temp.size += temp.next.size
                    temp.next = temp.next.next
                    if temp.next:
                        temp.next.prev = temp
                # Merge with prev free block
                if prev and prev.is_free:
                    prev.size += temp.size
                    prev.next = temp.next
                    if temp.next:
                        temp.next.prev = prev
                return f"Deallocated memory at address {start_addr}"
            prev = temp
            temp = temp.next
        return f"Invalid deallocation address"

    def compact(self):
        temp = self.head
        current_start = 0
        new_blocks = []

        while temp:
            if not temp.is_free:
                if temp.start != current_start:
                    temp.start = current_start
                current_start += temp.size
                new_blocks.append(temp)
            temp = temp.next

        if current_start < MAX_MEMORY:
            free_block = Block(MAX_MEMORY - current_start, current_start)
            new_blocks.append(free_block)

        for i in range(len(new_blocks) - 1):
            new_blocks[i].next = new_blocks[i + 1]
            new_blocks[i + 1].prev = new_blocks[i]
        new_blocks[-1].next = None
        new_blocks[0].prev = None
        self.head = new_blocks[0]
        return "Memory compacted."

    def fragmentation(self):
        internal = external = 0
        temp = self.head
        while temp:
            if temp.is_free:
                external += temp.size
            else:
                internal += (temp.size % PAGE_SIZE)
            temp = temp.next
        return f"External Fragmentation: {external}, Internal Fragmentation: {internal}"

    def efficiency(self):
        report = "--- Efficiency Summary ---\n"
        for method in ['first', 'best', 'next', 'buddy']:
            if self.counts[method]:
                avg_steps = self.steps[method] / self.counts[method]
                avg_time = self.time_taken[method] / self.counts[method]
                report += f"{method.capitalize()}-Fit: Avg Steps: {avg_steps:.2f}, Avg Time: {avg_time:.6f}s\n"
        return report

class MemoryGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Smart Memory Allocation Simulator")
        self.allocator = MemoryAllocator()

        tk.Label(root, text="Enter Size:").grid(row=0, column=0, padx=5, pady=5)
        self.size_entry = tk.Entry(root)
        self.size_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Button(root, text="Allocate", command=self.allocate).grid(row=1, column=0, pady=5)
        tk.Button(root, text="Deallocate", command=self.deallocate).grid(row=1, column=1, pady=5)
        self.dealloc_entry = tk.Entry(root)
        self.dealloc_entry.grid(row=1, column=2, padx=5, pady=5)

        tk.Button(root, text="Compact", command=self.compact).grid(row=2, column=0, pady=5)
        tk.Button(root, text="Fragmentation", command=self.fragmentation).grid(row=2, column=1, pady=5)
        tk.Button(root, text="Efficiency", command=self.efficiency).grid(row=2, column=2, pady=5)

        tk.Button(root, text="Show Memory", command=self.display).grid(row=3, column=0, columnspan=3, pady=5)

        # Canvas for memory visualization
        self.canvas_width = 700
        self.canvas_height = 50
        self.canvas = tk.Canvas(root, width=self.canvas_width, height=self.canvas_height, bg='white')
        self.canvas.grid(row=4, column=0, columnspan=3, padx=10, pady=10)

        self.output = tk.Text(root, height=15, width=80)
        self.output.grid(row=5, column=0, columnspan=3, padx=10, pady=10)

        # Draw initial empty memory
        self.draw_memory_blocks()

    def allocate(self):
        try:
            size = int(self.size_entry.get())
            if size <= 0 or size > MAX_MEMORY:
                raise ValueError
            result = self.allocator.allocate(size, method='smart')
            self.display(result)
            self.draw_memory_blocks()
        except ValueError:
            messagebox.showerror("Error", "Invalid size input.")

    def deallocate(self):
        try:
            start = int(self.dealloc_entry.get())
            result = self.allocator.deallocate(start)
            self.display(result)
            self.draw_memory_blocks()
        except ValueError:
            messagebox.showerror("Error", "Invalid start address.")

    def compact(self):
        result = self.allocator.compact()
        self.display(result)
        self.draw_memory_blocks()

    def fragmentation(self):
        result = self.allocator.fragmentation()
        self.display(result)

    def efficiency(self):
        result = self.allocator.efficiency()
        self.display(result)

    def display(self, msg=""):
        self.output.delete(1.0, tk.END)
        if msg:
            self.output.insert(tk.END, msg + "\n\n")
        self.output.insert(tk.END, self.allocator.display_memory())

    def draw_memory_blocks(self):
        self.canvas.delete("all")
        temp = self.allocator.head
        scale = self.canvas_width / MAX_MEMORY
        x = 0
        while temp:
            block_width = temp.size * scale
            color = STRATEGY_COLORS['free'] if temp.is_free else STRATEGY_COLORS.get(temp.strategy, '#000000')
            self.canvas.create_rectangle(x, 5, x + block_width, self.canvas_height - 5, fill=color, outline='black')
            # Draw start address text
            self.canvas.create_text(x + block_width/2, self.canvas_height/2,
                                    text=f"{temp.start}\n{temp.size}", fill='black', font=('Arial', 8))
            x += block_width
            temp = temp.next

if __name__ == "__main__":
    root = tk.Tk()
    app = MemoryGUI(root)
    root.mainloop()
